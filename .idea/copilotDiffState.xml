<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/.github/workflows/ci.yml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/.github/workflows/ci.yml" />
              <option name="updatedContent" value="name: Java CI&#10;&#10;on:&#10;  push:&#10;    branches:&#10;      - main&#10;      - 'release/**'&#10;  pull_request:&#10;    branches:&#10;      - main&#10;&#10;jobs:&#10;  build:&#10;    runs-on: ubuntu-latest&#10;    permissions:&#10;      contents: read&#10;      packages: write&#10;&#10;    steps:&#10;      - name: Checkout repository&#10;        uses: actions/checkout@v4&#10;&#10;      - name: Set up JDK 24&#10;        uses: actions/setup-java@v4&#10;        with:&#10;          java-version: '24'&#10;          distribution: 'temurin'&#10;          cache: 'maven'&#10;&#10;      - name: Build and Test with Maven&#10;        run: mvn -B clean verify&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/README.md">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/README.md" />
              <option name="originalContent" value="# Batalha Naval Master&#10;&#10;**MATÉRIA:** `PDSI I - UNIVERSIDADE FEDERAL DE UBERLÂNDIA`&#10;&#10;&#10;## Sobre o Projeto&#10;Este é um sistema completo de Batalha Naval, desenvolvido em Java (back-end) com Spark Java, autenticação via Firebase, e front-end em JavaScript. O projeto suporta partidas contra o computador, histórico de partidas, autenticação de usuários e interface web moderna.&#10;&#10;## Pré-requisitos&#10;- Java 17 ou superior&#10;- Maven 3.8+ instalado&#10;- (Opcional) Node.js e npm para testes front-end&#10;- Conta no Firebase (para autenticação)&#10;&#10;## Como executar o projeto&#10;&#10;### Windows&#10;1. Abra o Prompt de Comando ou PowerShell na raiz do projeto.&#10;2. Execute:&#10;   ```&#10;   mvn clean package&#10;   java -cp target/BatalhaNaval-1.0-SNAPSHOT.jar battleship.application.MainApplication&#10;   ```&#10;&#10;### macOS&#10;1. Abra o Terminal na raiz do projeto.&#10;2. Execute:&#10;   ```&#10;   mvn clean package&#10;   java -cp target/BatalhaNaval-1.0-SNAPSHOT.jar battleship.application.MainApplication&#10;   ```&#10;&#10;O servidor estará disponível em `http://localhost:4567`.&#10;&#10;## Como executar os testes&#10;&#10;### Testes back-end (Java)&#10;No terminal (Windows ou Mac), execute:&#10;```&#10;mvn test&#10;```&#10;Os resultados aparecerão no console e em `target/surefire-reports/`.&#10;&#10;### Testes front-end (JavaScript)&#10;Se desejar rodar os testes do front-end (Jest):&#10;1. Instale o Jest globalmente ou no projeto:&#10;   ```&#10;   npm install --global jest&#10;   # ou&#10;   npm install --save-dev jest&#10;   ```&#10;2. Execute:&#10;   ```&#10;   npx jest&#10;   ```&#10;&#10;## Como simular testes falhos ou ignorados&#10;&#10;### Para forçar uma falha em um teste Java&#10;Altere um valor esperado em um teste, por exemplo em `GameServiceImplTest.java`:&#10;```java&#10;@Test&#10;public void testInitGame() {&#10;    InitResponse resp = service.initGame(new InitRequest(7));&#10;    // Espera 7, mas força erro esperando 8&#10;    assertEquals(8, resp.getSize());&#10;}&#10;```&#10;&#10;### Para pular (ignorar) um teste Java&#10;Adicione a anotação `@Disabled`:&#10;```java&#10;import org.junit.jupiter.api.Disabled;&#10;&#10;@Disabled(&quot;Ignorado para demonstração&quot;)&#10;@Test&#10;public void testInitGame() {&#10;    // ...&#10;}&#10;```&#10;&#10;### Para forçar erro em um teste Java&#10;Lance uma exceção manualmente:&#10;```java&#10;@Test&#10;public void testForcaErro() {&#10;    throw new RuntimeException(&quot;Erro proposital&quot;);&#10;}&#10;```&#10;&#10;### Para simular falha em teste front-end (Jest)&#10;Altere um valor esperado em `api.test.js`:&#10;```js&#10;test('deve falhar propositalmente', () =&gt; {&#10;    expect(1 + 1).toBe(3);&#10;});&#10;```&#10;&#10;## Estrutura do Projeto&#10;- `src/main/java/battleship/`: Código-fonte Java (domínio, serviços, controllers, filtros, exceções)&#10;- `src/main/resources/public/`: Front-end (HTML, CSS, JS)&#10;- `src/test/java/`: Testes unitários Java&#10;- `src/test/js/`: Testes unitários front-end (Jest)&#10;- `target/`: Saída de build e relatórios de testes&#10;&#10;## Observações&#10;- Os testes unitários estão localizados em `src/test/java/` (Java) e `src/test/js/` (JavaScript).&#10;- Para dúvidas ou problemas, consulte os arquivos de teste e os relatórios em `target/surefire-reports/`.&#10;- O arquivo `serviceAccountKey.json` do Firebase deve ser colocado em `src/main/resources/` (não versionado).&#10;- O projeto já está configurado para rodar em ambientes Windows, Mac e Linux.&#10;- Para autenticação, configure seu projeto Firebase e atualize as credenciais conforme necessário.&#10;&#10;## Licença&#10;Este projeto está sob a licença MIT.&#10;&#10;---" />
              <option name="updatedContent" value="# Batalha Naval Master&#10;&#10;**MATÉRIA:** `PDSI I - UNIVERSIDADE FEDERAL DE UBERLÂNDIA`&#10;&#10;&#10;## Sobre o Projeto&#10;Este é um sistema completo de Batalha Naval, desenvolvido em Java (back-end) com Spark Java, autenticação via Firebase, e front-end em JavaScript. O projeto suporta partidas contra o computador, histórico de partidas, autenticação de usuários e interface web moderna.&#10;&#10;## Pré-requisitos&#10;- Java 17 ou superior&#10;- Maven 3.8+ instalado&#10;- (Opcional) Node.js e npm para testes front-end&#10;- Conta no Firebase (para autenticação)&#10;&#10;## Como executar o projeto&#10;&#10;### Windows&#10;1. Abra o Prompt de Comando ou PowerShell na raiz do projeto.&#10;2. Execute:&#10;   ```&#10;   mvn clean package&#10;   java -cp target/BatalhaNaval-1.0-SNAPSHOT.jar battleship.application.MainApplication&#10;   ```&#10;&#10;### macOS&#10;1. Abra o Terminal na raiz do projeto.&#10;2. Execute:&#10;   ```&#10;   mvn clean package&#10;   java -cp target/BatalhaNaval-1.0-SNAPSHOT.jar battleship.application.MainApplication&#10;   ```&#10;&#10;O servidor estará disponível em `http://localhost:4567`.&#10;&#10;## Como executar os testes&#10;&#10;### Testes back-end (Java)&#10;No terminal (Windows ou Mac), execute:&#10;```&#10;mvn test&#10;```&#10;Os resultados aparecerão no console e em `target/surefire-reports/`.&#10;&#10;### Testes front-end (JavaScript)&#10;Se desejar rodar os testes do front-end (Jest):&#10;1. Instale o Jest globalmente ou no projeto:&#10;   ```&#10;   npm install --global jest&#10;   # ou&#10;   npm install --save-dev jest&#10;   ```&#10;2. Execute:&#10;   ```&#10;   npx jest&#10;   ```&#10;&#10;## Como simular testes falhos ou ignorados&#10;&#10;### Para forçar uma falha em um teste Java&#10;Altere um valor esperado em um teste, por exemplo em `GameServiceImplTest.java`:&#10;```java&#10;@Test&#10;public void testInitGame() {&#10;    InitResponse resp = service.initGame(new InitRequest(7));&#10;    // Espera 7, mas força erro esperando 8&#10;    assertEquals(8, resp.getSize());&#10;}&#10;```&#10;&#10;### Para pular (ignorar) um teste Java&#10;Adicione a anotação `@Disabled`:&#10;```java&#10;import org.junit.jupiter.api.Disabled;&#10;&#10;@Disabled(&quot;Ignorado para demonstração&quot;)&#10;@Test&#10;public void testInitGame() {&#10;    // ...&#10;}&#10;```&#10;&#10;### Para forçar erro em um teste Java&#10;Lance uma exceção manualmente:&#10;```java&#10;@Test&#10;public void testForcaErro() {&#10;    throw new RuntimeException(&quot;Erro proposital&quot;);&#10;}&#10;```&#10;&#10;### Para simular falha em teste front-end (Jest)&#10;Altere um valor esperado em `api.test.js`:&#10;```js&#10;test('deve falhar propositalmente', () =&gt; {&#10;    expect(1 + 1).toBe(3);&#10;});&#10;```&#10;&#10;## Integração Contínua (CI)&#10;&#10;Este projeto utiliza GitHub Actions para garantir a qualidade do código a cada commit e pull request. O workflow de CI:&#10;- Faz checkout do repositório&#10;- Configura o Java 24&#10;- Realiza build e executa todos os testes com Maven&#10;- Só permite o build se todos os testes passarem&#10;&#10;O arquivo de configuração está em `.github/workflows/ci.yml`.&#10;&#10;## O que cada teste faz&#10;&#10;### Testes de domínio&#10;- **BoardTest**: Testa posicionamento de navios, sobreposição, limites do tabuleiro, ataques (acerto/erro) e verificação de fim de jogo.&#10;- **ShipTest**: Testa geração de coordenadas do navio (horizontal/vertical), ocupação, registro de acertos e afundamento.&#10;- **CoordinateTest**: Testa igualdade, hashCode e métodos getters da coordenada.&#10;- **ShipFactoryTest**: Testa se a fábrica cria navios corretamente com o tamanho esperado.&#10;&#10;### Testes de exceção&#10;- **BadRequestExceptionTest**: Testa se a exceção retorna a mensagem correta.&#10;&#10;### Testes de serviço&#10;- **GameServiceImplTest**: Testa inicialização do jogo, posicionamento de navio do jogador (válido e inválido), ataques do jogador e do computador.&#10;&#10;### Testes front-end (Jest)&#10;- **api.test.js**: Testa a função `addHistory` para garantir que lida corretamente com respostas de sucesso e erro do back-end.&#10;&#10;## Estrutura do Projeto&#10;- `src/main/java/battleship/`: Código-fonte Java (domínio, serviços, controllers, filtros, exceções)&#10;- `src/main/resources/public/`: Front-end (HTML, CSS, JS)&#10;- `src/test/java/`: Testes unitários Java&#10;- `src/test/js/`: Testes unitários front-end (Jest)&#10;- `target/`: Saída de build e relatórios de testes&#10;&#10;## Observações&#10;- Os testes unitários estão localizados em `src/test/java/` (Java) e `src/test/js/` (JavaScript).&#10;- Para dúvidas ou problemas, consulte os arquivos de teste e os relatórios em `target/surefire-reports/`.&#10;- O arquivo `serviceAccountKey.json` do Firebase deve ser colocado em `src/main/resources/` (não versionado).&#10;- O projeto já está configurado para rodar em ambientes Windows, Mac e Linux.&#10;- Para autenticação, configure seu projeto Firebase e atualize as credenciais conforme necessário.&#10;&#10;## Licença&#10;Este projeto está sob a licença MIT.&#10;&#10;---&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/pom.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/pom.xml" />
              <option name="originalContent" value="&lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot;&#10;         xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;&#10;         xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0&#10;                             http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&gt;&#10;    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;&#10;&#10;    &lt;groupId&gt;battleship&lt;/groupId&gt;&#10;    &lt;artifactId&gt;BatalhaNaval&lt;/artifactId&gt;&#10;    &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;&#10;&#10;    &lt;properties&gt;&#10;        &lt;maven.compiler.source&gt;24&lt;/maven.compiler.source&gt;&#10;        &lt;maven.compiler.target&gt;24&lt;/maven.compiler.target&gt;&#10;        &lt;project.build.sourceEncoding&gt;UTF-8&lt;/project.build.sourceEncoding&gt;&#10;    &lt;/properties&gt;&#10;&#10;    &lt;dependencies&gt;&#10;        &lt;!-- Core --&gt;&#10;        &lt;dependency&gt;&#10;            &lt;groupId&gt;com.sparkjava&lt;/groupId&gt;&#10;            &lt;artifactId&gt;spark-core&lt;/artifactId&gt;&#10;            &lt;version&gt;2.9.4&lt;/version&gt;&#10;        &lt;/dependency&gt;&#10;        &lt;dependency&gt;&#10;            &lt;groupId&gt;com.google.code.gson&lt;/groupId&gt;&#10;            &lt;artifactId&gt;gson&lt;/artifactId&gt;&#10;            &lt;version&gt;2.10.1&lt;/version&gt;&#10;        &lt;/dependency&gt;&#10;        &lt;dependency&gt;&#10;            &lt;groupId&gt;org.slf4j&lt;/groupId&gt;&#10;            &lt;artifactId&gt;slf4j-simple&lt;/artifactId&gt;&#10;            &lt;version&gt;1.7.36&lt;/version&gt;&#10;        &lt;/dependency&gt;&#10;        &lt;dependency&gt;&#10;            &lt;groupId&gt;com.google.firebase&lt;/groupId&gt;&#10;            &lt;artifactId&gt;firebase-admin&lt;/artifactId&gt;&#10;            &lt;version&gt;9.1.1&lt;/version&gt;&#10;        &lt;/dependency&gt;&#10;&#10;        &lt;!-- Test --&gt;&#10;        &lt;dependency&gt;&#10;            &lt;groupId&gt;org.junit.jupiter&lt;/groupId&gt;&#10;            &lt;artifactId&gt;junit-jupiter-api&lt;/artifactId&gt;&#10;            &lt;version&gt;5.9.2&lt;/version&gt;&#10;            &lt;scope&gt;test&lt;/scope&gt;&#10;        &lt;/dependency&gt;&#10;        &lt;dependency&gt;&#10;            &lt;groupId&gt;org.junit.jupiter&lt;/groupId&gt;&#10;            &lt;artifactId&gt;junit-jupiter-engine&lt;/artifactId&gt;&#10;            &lt;version&gt;5.9.2&lt;/version&gt;&#10;            &lt;scope&gt;test&lt;/scope&gt;&#10;        &lt;/dependency&gt;&#10;        &lt;dependency&gt;&#10;            &lt;groupId&gt;org.mockito&lt;/groupId&gt;&#10;            &lt;artifactId&gt;mockito-core&lt;/artifactId&gt;&#10;            &lt;version&gt;4.8.1&lt;/version&gt;&#10;            &lt;scope&gt;test&lt;/scope&gt;&#10;        &lt;/dependency&gt;&#10;        &lt;dependency&gt;&#10;            &lt;groupId&gt;org.mockito&lt;/groupId&gt;&#10;            &lt;artifactId&gt;mockito-inline&lt;/artifactId&gt;&#10;            &lt;version&gt;4.8.1&lt;/version&gt;&#10;            &lt;scope&gt;test&lt;/scope&gt;&#10;        &lt;/dependency&gt;&#10;        &lt;dependency&gt;&#10;            &lt;groupId&gt;net.bytebuddy&lt;/groupId&gt;&#10;            &lt;artifactId&gt;byte-buddy&lt;/artifactId&gt;&#10;            &lt;version&gt;1.14.4&lt;/version&gt;&#10;            &lt;scope&gt;test&lt;/scope&gt;&#10;        &lt;/dependency&gt;&#10;    &lt;/dependencies&gt;&#10;&#10;    &lt;build&gt;&#10;        &lt;plugins&gt;&#10;            &lt;!-- Executar aplicação --&gt;&#10;            &lt;plugin&gt;&#10;                &lt;groupId&gt;org.codehaus.mojo&lt;/groupId&gt;&#10;                &lt;artifactId&gt;exec-maven-plugin&lt;/artifactId&gt;&#10;                &lt;version&gt;3.0.0&lt;/version&gt;&#10;                &lt;configuration&gt;&#10;                    &lt;mainClass&gt;battleship.application.MainApplication&lt;/mainClass&gt;&#10;                    &lt;cleanupDaemonThreads&gt;false&lt;/cleanupDaemonThreads&gt;&#10;                &lt;/configuration&gt;&#10;            &lt;/plugin&gt;&#10;            &lt;!-- Testes --&gt;&#10;            &lt;plugin&gt;&#10;                &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;&#10;                &lt;artifactId&gt;maven-surefire-plugin&lt;/artifactId&gt;&#10;                &lt;version&gt;3.0.0-M7&lt;/version&gt;&#10;                &lt;configuration&gt;&#10;                    &lt;useModulePath&gt;false&lt;/useModulePath&gt;&#10;                    &lt;argLine&gt;-Dnet.bytebuddy.experimental=true&lt;/argLine&gt;&#10;                &lt;/configuration&gt;&#10;            &lt;/plugin&gt;&#10;        &lt;/plugins&gt;&#10;    &lt;/build&gt;&#10;&lt;/project&gt;&#10;" />
              <option name="updatedContent" value="&lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot;&#10;         xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;&#10;         xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0&#10;                             http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&gt;&#10;    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;&#10;&#10;    &lt;groupId&gt;battleship&lt;/groupId&gt;&#10;    &lt;artifactId&gt;BatalhaNaval&lt;/artifactId&gt;&#10;    &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;&#10;&#10;    &lt;properties&gt;&#10;        &lt;maven.compiler.source&gt;24&lt;/maven.compiler.source&gt;&#10;        &lt;maven.compiler.target&gt;24&lt;/maven.compiler.target&gt;&#10;        &lt;project.build.sourceEncoding&gt;UTF-8&lt;/project.build.sourceEncoding&gt;&#10;    &lt;/properties&gt;&#10;&#10;    &lt;dependencies&gt;&#10;        &lt;!-- Core --&gt;&#10;        &lt;dependency&gt;&#10;            &lt;groupId&gt;com.sparkjava&lt;/groupId&gt;&#10;            &lt;artifactId&gt;spark-core&lt;/artifactId&gt;&#10;            &lt;version&gt;2.9.4&lt;/version&gt;&#10;        &lt;/dependency&gt;&#10;        &lt;dependency&gt;&#10;            &lt;groupId&gt;com.google.code.gson&lt;/groupId&gt;&#10;            &lt;artifactId&gt;gson&lt;/artifactId&gt;&#10;            &lt;version&gt;2.10.1&lt;/version&gt;&#10;        &lt;/dependency&gt;&#10;        &lt;dependency&gt;&#10;            &lt;groupId&gt;org.slf4j&lt;/groupId&gt;&#10;            &lt;artifactId&gt;slf4j-simple&lt;/artifactId&gt;&#10;            &lt;version&gt;1.7.36&lt;/version&gt;&#10;        &lt;/dependency&gt;&#10;        &lt;dependency&gt;&#10;            &lt;groupId&gt;com.google.firebase&lt;/groupId&gt;&#10;            &lt;artifactId&gt;firebase-admin&lt;/artifactId&gt;&#10;            &lt;version&gt;9.1.1&lt;/version&gt;&#10;        &lt;/dependency&gt;&#10;&#10;        &lt;!-- Test --&gt;&#10;        &lt;dependency&gt;&#10;            &lt;groupId&gt;org.junit.jupiter&lt;/groupId&gt;&#10;            &lt;artifactId&gt;junit-jupiter-api&lt;/artifactId&gt;&#10;            &lt;version&gt;5.9.2&lt;/version&gt;&#10;            &lt;scope&gt;test&lt;/scope&gt;&#10;        &lt;/dependency&gt;&#10;        &lt;dependency&gt;&#10;            &lt;groupId&gt;org.junit.jupiter&lt;/groupId&gt;&#10;            &lt;artifactId&gt;junit-jupiter-engine&lt;/artifactId&gt;&#10;            &lt;version&gt;5.9.2&lt;/version&gt;&#10;            &lt;scope&gt;test&lt;/scope&gt;&#10;        &lt;/dependency&gt;&#10;        &lt;dependency&gt;&#10;            &lt;groupId&gt;org.mockito&lt;/groupId&gt;&#10;            &lt;artifactId&gt;mockito-core&lt;/artifactId&gt;&#10;            &lt;version&gt;5.2.0&lt;/version&gt;&#10;            &lt;scope&gt;test&lt;/scope&gt;&#10;        &lt;/dependency&gt;&#10;    &lt;/dependencies&gt;&#10;&#10;    &lt;build&gt;&#10;        &lt;plugins&gt;&#10;            &lt;!-- Executar aplicação --&gt;&#10;            &lt;plugin&gt;&#10;                &lt;groupId&gt;org.codehaus.mojo&lt;/groupId&gt;&#10;                &lt;artifactId&gt;exec-maven-plugin&lt;/artifactId&gt;&#10;                &lt;version&gt;3.0.0&lt;/version&gt;&#10;                &lt;configuration&gt;&#10;                    &lt;mainClass&gt;battleship.application.MainApplication&lt;/mainClass&gt;&#10;                    &lt;cleanupDaemonThreads&gt;false&lt;/cleanupDaemonThreads&gt;&#10;                &lt;/configuration&gt;&#10;            &lt;/plugin&gt;&#10;            &lt;!-- Testes --&gt;&#10;            &lt;plugin&gt;&#10;                &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;&#10;                &lt;artifactId&gt;maven-surefire-plugin&lt;/artifactId&gt;&#10;                &lt;version&gt;3.0.0-M7&lt;/version&gt;&#10;                &lt;configuration&gt;&#10;                    &lt;includes&gt;&#10;                        &lt;include&gt;**/*Test.java&lt;/include&gt;&#10;                    &lt;/includes&gt;&#10;                &lt;/configuration&gt;&#10;            &lt;/plugin&gt;&#10;        &lt;/plugins&gt;&#10;    &lt;/build&gt;&#10;&lt;/project&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/test/java/battleship/domain/BoardTest.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/test/java/battleship/domain/BoardTest.java" />
              <option name="updatedContent" value="package battleship.domain;&#10;&#10;import org.junit.jupiter.api.Test;&#10;import static org.junit.jupiter.api.Assertions.*;&#10;&#10;// Testes unitários para a classe Board&#10;public class BoardTest {&#10;    @Test&#10;    public void testPlaceShipSuccess() {&#10;        Board board = new Board(10);&#10;        Ship ship = new Ship(3);&#10;        ship.setStart(new Coordinate(0, 0));&#10;        ship.setOrientation(false); // horizontal&#10;        // Deve conseguir posicionar o navio sem sobreposição&#10;        assertTrue(board.place(ship));&#10;    }&#10;&#10;    @Test&#10;    public void testPlaceShipOutOfBounds() {&#10;        Board board = new Board(5);&#10;        Ship ship = new Ship(4);&#10;        ship.setStart(new Coordinate(4, 3));&#10;        ship.setOrientation(false); // horizontal&#10;        // Não deve permitir posicionar fora do tabuleiro&#10;        assertFalse(board.place(ship));&#10;    }&#10;&#10;    @Test&#10;    public void testPlaceShipOverlap() {&#10;        Board board = new Board(10);&#10;        Ship ship1 = new Ship(3);&#10;        ship1.setStart(new Coordinate(0, 0));&#10;        ship1.setOrientation(false);&#10;        Ship ship2 = new Ship(3);&#10;        ship2.setStart(new Coordinate(0, 1));&#10;        ship2.setOrientation(false);&#10;        board.place(ship1);&#10;        // Não deve permitir sobreposição de navios&#10;        assertFalse(board.place(ship2));&#10;    }&#10;&#10;    @Test&#10;    public void testAttackHitAndMiss() {&#10;        Board board = new Board(5);&#10;        Ship ship = new Ship(2);&#10;        ship.setStart(new Coordinate(1, 1));&#10;        ship.setOrientation(false);&#10;        board.place(ship);&#10;        // Deve acertar o navio&#10;        AttackResult hit = board.attack(1, 1);&#10;        assertTrue(hit.isHit());&#10;        // Deve errar fora do navio&#10;        AttackResult miss = board.attack(0, 0);&#10;        assertFalse(miss.isHit());&#10;    }&#10;&#10;    @Test&#10;    public void testGameOver() {&#10;        Board board = new Board(3);&#10;        Ship ship = new Ship(1);&#10;        ship.setStart(new Coordinate(0, 0));&#10;        ship.setOrientation(false);&#10;        board.place(ship);&#10;        // Após afundar todos os navios, gameOver deve ser true&#10;        AttackResult result = board.attack(0, 0);&#10;        assertTrue(result.isGameOver());&#10;    }&#10;}&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/test/java/battleship/domain/CoordinateTest.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/test/java/battleship/domain/CoordinateTest.java" />
              <option name="updatedContent" value="package battleship.domain;&#10;&#10;import org.junit.jupiter.api.Test;&#10;import static org.junit.jupiter.api.Assertions.*;&#10;&#10;// Testes unitários para a classe Coordinate&#10;public class CoordinateTest {&#10;    @Test&#10;    public void testEqualsAndHashCode() {&#10;        Coordinate c1 = new Coordinate(1, 2);&#10;        Coordinate c2 = new Coordinate(1, 2);&#10;        Coordinate c3 = new Coordinate(2, 1);&#10;        assertEquals(c1, c2, &quot;Coordenadas iguais devem ser iguais&quot;);&#10;        assertEquals(c1.hashCode(), c2.hashCode(), &quot;HashCode deve ser igual para objetos iguais&quot;);&#10;        assertNotEquals(c1, c3, &quot;Coordenadas diferentes não devem ser iguais&quot;);&#10;    }&#10;&#10;    @Test&#10;    public void testGetters() {&#10;        Coordinate c = new Coordinate(3, 4);&#10;        assertEquals(3, c.getRow());&#10;        assertEquals(4, c.getCol());&#10;    }&#10;}&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/test/java/battleship/domain/ShipFactoryTest.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/test/java/battleship/domain/ShipFactoryTest.java" />
              <option name="updatedContent" value="package battleship.domain;&#10;&#10;import org.junit.jupiter.api.Test;&#10;import static org.junit.jupiter.api.Assertions.*;&#10;&#10;// Testes unitários para a classe ShipFactory&#10;public class ShipFactoryTest {&#10;    @Test&#10;    public void testCreateShip() {&#10;        ShipFactory factory = new ShipFactory();&#10;        Ship ship = factory.create(4);&#10;        assertNotNull(ship, &quot;A fábrica deve criar um navio&quot;);&#10;        // Verifica se o navio criado tem o tamanho correto&#10;        ship.setStart(new Coordinate(0,0));&#10;        ship.setOrientation(false);&#10;        assertEquals(4, ship.getCoordinates().size());&#10;    }&#10;}&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/test/java/battleship/domain/ShipTest.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/test/java/battleship/domain/ShipTest.java" />
              <option name="updatedContent" value="package battleship.domain;&#10;&#10;import org.junit.jupiter.api.Test;&#10;import java.util.Set;&#10;import static org.junit.jupiter.api.Assertions.*;&#10;&#10;// Testes unitários para a classe Ship&#10;public class ShipTest {&#10;    @Test&#10;    public void testGetCoordinatesHorizontal() {&#10;        Ship ship = new Ship(3);&#10;        ship.setStart(new Coordinate(2, 2));&#10;        ship.setOrientation(false); // horizontal&#10;        Set&lt;Coordinate&gt; coords = ship.getCoordinates();&#10;        assertTrue(coords.contains(new Coordinate(2,2)));&#10;        assertTrue(coords.contains(new Coordinate(2,3)));&#10;        assertTrue(coords.contains(new Coordinate(2,4)));&#10;        assertEquals(3, coords.size());&#10;    }&#10;&#10;    @Test&#10;    public void testGetCoordinatesVertical() {&#10;        Ship ship = new Ship(2);&#10;        ship.setStart(new Coordinate(1, 1));&#10;        ship.setOrientation(true); // vertical&#10;        Set&lt;Coordinate&gt; coords = ship.getCoordinates();&#10;        assertTrue(coords.contains(new Coordinate(1,1)));&#10;        assertTrue(coords.contains(new Coordinate(2,1)));&#10;        assertEquals(2, coords.size());&#10;    }&#10;&#10;    @Test&#10;    public void testOccupies() {&#10;        Ship ship = new Ship(2);&#10;        ship.setStart(new Coordinate(0, 0));&#10;        ship.setOrientation(false);&#10;        assertTrue(ship.occupies(new Coordinate(0,0)));&#10;        assertTrue(ship.occupies(new Coordinate(0,1)));&#10;        assertFalse(ship.occupies(new Coordinate(1,0)));&#10;    }&#10;&#10;    @Test&#10;    public void testRegisterHitAndIsSunk() {&#10;        Ship ship = new Ship(2);&#10;        ship.setStart(new Coordinate(0, 0));&#10;        ship.setOrientation(false);&#10;        assertFalse(ship.isSunk());&#10;        ship.registerHit(new Coordinate(0,0));&#10;        assertFalse(ship.isSunk());&#10;        ship.registerHit(new Coordinate(0,1));&#10;        assertTrue(ship.isSunk());&#10;    }&#10;}&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/test/java/battleship/exception/BadRequestExceptionTest.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/test/java/battleship/exception/BadRequestExceptionTest.java" />
              <option name="updatedContent" value="package battleship.exception;&#10;&#10;import org.junit.jupiter.api.Test;&#10;import static org.junit.jupiter.api.Assertions.*;&#10;&#10;// Testes unitários para BadRequestException&#10;public class BadRequestExceptionTest {&#10;    @Test&#10;    public void testExceptionMessage() {&#10;        String msg = &quot;Mensagem de erro&quot;;&#10;        BadRequestException ex = new BadRequestException(msg);&#10;        assertEquals(msg, ex.getMessage());&#10;    }&#10;}&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/test/java/battleship/service/impl/GameServiceImplTest.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/test/java/battleship/service/impl/GameServiceImplTest.java" />
              <option name="originalContent" value="package battleship.service.impl;&#10;&#10;import battleship.dto.*;&#10;import battleship.exception.BadRequestException;&#10;import org.junit.jupiter.api.BeforeEach;&#10;import org.junit.jupiter.api.Test;&#10;&#10;import static org.junit.jupiter.api.Assertions.*;&#10;&#10;// Testes unitários para GameServiceImpl&#10;public class GameServiceImplTest {&#10;    private GameServiceImpl service;&#10;&#10;    @BeforeEach&#10;    public void setup() {&#10;        service = new GameServiceImpl();&#10;        // Inicializa o jogo com tabuleiro 5x5&#10;        service.initGame(new InitRequest(5));&#10;    }&#10;&#10;    @Test&#10;    public void testInitGame() {&#10;        InitResponse resp = service.initGame(new InitRequest(7));&#10;        assertEquals(7, resp.getSize());&#10;    }&#10;&#10;    @Test&#10;    public void testPlacePlayerShipSuccess() {&#10;        PlaceShipRequest req = new PlaceShipRequest(0, 0, 2, false);&#10;        assertDoesNotThrow(() -&gt; service.placePlayerShip(req));&#10;    }&#10;&#10;    @Test&#10;    public void testPlacePlayerShipInvalid() {&#10;        PlaceShipRequest req = new PlaceShipRequest(10, 10, 2, false);&#10;        assertThrows(BadRequestException.class, () -&gt; service.placePlayerShip(req));&#10;    }&#10;&#10;    @Test&#10;    public void testPlayerAttackAndComputerAttack() {&#10;        // Ataca uma posição válida&#10;        AttackResponse resp = service.playerAttack(new AttackRequest(0, 0));&#10;        assertNotNull(resp);&#10;        // Computador ataca&#10;        AttackResponse compResp = service.computerAttack();&#10;        assertNotNull(compResp);&#10;    }&#10;}&#10;&#10;" />
              <option name="updatedContent" value="package battleship.service.impl;&#10;&#10;import battleship.dto.*;&#10;import battleship.exception.BadRequestException;&#10;import org.junit.jupiter.api.BeforeEach;&#10;import org.junit.jupiter.api.Test;&#10;&#10;import static org.junit.jupiter.api.Assertions.*;&#10;&#10;// Testes unitários para GameServiceImpl&#10;public class GameServiceImplTest {&#10;    private GameServiceImpl service;&#10;&#10;    @BeforeEach&#10;    public void setup() {&#10;        service = new GameServiceImpl();&#10;        // Inicializa o jogo com tabuleiro 10x10 para evitar loop infinito&#10;        service.initGame(new InitRequest(10));&#10;    }&#10;&#10;    @Test&#10;    public void testInitGame() {&#10;        InitResponse resp = service.initGame(new InitRequest(7));&#10;        assertEquals(7, resp.getSize());&#10;    }&#10;&#10;    @Test&#10;    public void testPlacePlayerShipSuccess() {&#10;        PlaceShipRequest req = new PlaceShipRequest(0, 0, 2, false);&#10;        assertDoesNotThrow(() -&gt; service.placePlayerShip(req));&#10;    }&#10;&#10;    @Test&#10;    public void testPlacePlayerShipInvalid() {&#10;        PlaceShipRequest req = new PlaceShipRequest(10, 10, 2, false);&#10;        assertThrows(BadRequestException.class, () -&gt; service.placePlayerShip(req));&#10;    }&#10;&#10;    @Test&#10;    public void testPlayerAttackAndComputerAttack() {&#10;        // Ataca uma posição válida&#10;        AttackResponse resp = service.playerAttack(new AttackRequest(0, 0));&#10;        assertNotNull(resp);&#10;        // Computador ataca&#10;        AttackResponse compResp = service.computerAttack();&#10;        assertNotNull(compResp);&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/test/js/api.test.js">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/test/js/api.test.js" />
              <option name="updatedContent" value="// Teste unitário para a função addHistory do front-end usando Jest&#10;// Este teste simula uma chamada bem-sucedida e uma chamada com erro&#10;import { addHistory } from '../../src/main/resources/public/js/api.js';&#10;&#10;// Mock do fetch global&#10;beforeEach(() =&gt; {&#10;    global.fetch = jest.fn();&#10;});&#10;&#10;afterEach(() =&gt; {&#10;    jest.resetAllMocks();&#10;});&#10;&#10;describe('addHistory', () =&gt; {&#10;    it('deve resolver quando o status for 204', async () =&gt; {&#10;        fetch.mockResolvedValue({ status: 204 });&#10;        await expect(addHistory('win', 'computer')).resolves.toBeUndefined();&#10;    });&#10;&#10;    it('deve lançar erro se o status não for 204', async () =&gt; {&#10;        fetch.mockResolvedValue({ status: 400 });&#10;        await expect(addHistory('lose', 'user')).rejects.toThrow('Falha ao gravar histórico');&#10;    });&#10;});&#10;&#10;// Comentário: Este teste garante que a função addHistory lida corretamente com respostas de sucesso e erro do back-end." />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>